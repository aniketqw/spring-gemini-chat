name: Deploy to Hugging Face Space (Docker)

on:
  push:
    branches: [ master ]              # change if your default branch differs
  workflow_dispatch:

jobs:
  build:
    name: Maven build (sanity)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Build (skip tests)
        run: mvn -B -DskipTests package

  create-and-sync-space:
    name: Create Docker Space + push orphan LFS deploy
    needs: build
    runs-on: ubuntu-latest
    env:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}      # HF write token
      HF_USERNAME: Phoenix21                  # or use GitHub vars
      HF_SPACE: SpringGeminiChat              # or a new space name
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      - name: Install hub client + git-lfs
        run: |
          python -m pip install --upgrade pip
          python -m pip install "huggingface_hub>=0.23"
          sudo apt-get update
          sudo apt-get install -y git-lfs
          git lfs install

      - name: Create Space if missing (SDK = docker)
        shell: python
        env:
          HF_TOKEN: ${{ env.HF_TOKEN }}
          HF_USERNAME: ${{ env.HF_USERNAME }}
          HF_SPACE: ${{ env.HF_SPACE }}
        run: |
          import os
          from huggingface_hub import HfApi
          api = HfApi(token=os.environ["HF_TOKEN"])
          repo_id = f"{os.environ['HF_USERNAME']}/{os.environ['HF_SPACE']}"
          try:
            api.repo_info(repo_id, repo_type="space")
            print(f"Space exists: {repo_id}")
          except Exception:
            api.create_repo(
              repo_id=repo_id,
              repo_type="space",
              space_sdk="docker",   # ensure a Docker Space
              private=False
            )
            print(f"Space created: {repo_id}")

      - name: Prepare orphan deploy commit (Docker README + LFS)
        shell: bash
        run: |
          set -euo pipefail

          # 1) Ensure README has the Docker YAML front matter
          if ! grep -qE '^sdk:\s*docker' README.md 2>/dev/null; then
            tmp="$(mktemp)"
            # Use printf (no heredoc) to avoid YAML token issues
            printf '%s\n' \
'---' \
'title: Spring Gemini Chat (Docker)' \
'sdk: docker' \
'app_port: 7860' \
'---' \
'' > "$tmp"
            cat README.md >> "$tmp"
            mv "$tmp" README.md
          fi

          # 2) Start an orphan branch so Space won't inherit non-LFS history
          git checkout --orphan space-deploy

          # 3) Track images/binaries with LFS (expand globs as needed)
          git lfs track "screenshots/*.png"
          git lfs track "*.png" "*.jpg" "*.jpeg" "*.gif" "*.webp" "*.zip"
          git add .gitattributes

          # 4) Renormalize so tracked files become LFS pointers in THIS commit
          git add --renormalize .

          # 5) Ignore build outputs
          echo -e "target/\n*.log\n" >> .gitignore
          git add .gitignore

          # 6) Commit the deploy snapshot
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "Space deploy: orphan commit with Docker config + LFS pointers"

      - name: Push to Space (force first sync)
        shell: bash
        run: |
          set -euo pipefail
          SPACE_PATH="${HF_USERNAME}/${HF_SPACE}"
          git remote remove space 2>/dev/null || true
          git remote add    space "https://${HF_USERNAME}:${HF_TOKEN}@huggingface.co/spaces/${SPACE_PATH}"

          # Optional: show which files are LFS
          git lfs ls-files || true

          # First sync: force push orphan snapshot to Space's main
          git push --force space HEAD:main
