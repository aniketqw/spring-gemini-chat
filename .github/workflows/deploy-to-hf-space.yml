name: Deploy to Hugging Face Space

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Prepare static resources
      run: |
        # Create the correct directories for Spring Boot static resources
        mkdir -p src/main/resources/static
        mkdir -p src/main/resources/public
        
        # Copy your index.html to the correct location
        if [ -f "src/index.html" ]; then
          cp src/index.html src/main/resources/static/
          echo "Copied index.html to static resources"
        fi
        
        # Copy any other static files (CSS, JS, images)
        if [ -d "src/static" ]; then
          cp -r src/static/* src/main/resources/static/ 2>/dev/null || echo "No static directory found"
        fi
        
        # Copy any CSS files
        find src -name "*.css" -exec cp {} src/main/resources/static/ \; 2>/dev/null || echo "No CSS files found"
        
        # Copy any JS files  
        find src -name "*.js" -exec cp {} src/main/resources/static/ \; 2>/dev/null || echo "No JS files found"
        
        # List what we have in static resources
        echo "Static resources:"
        ls -la src/main/resources/static/ || echo "Static directory is empty"
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Create Dockerfile for Hugging Face
      run: |
        cat > Dockerfile << 'EOF'
        FROM openjdk:17-jdk-slim
        
        WORKDIR /app
        
        # Copy the jar file
        COPY target/*.jar app.jar
        
        # Expose port
        EXPOSE 7860
        
        # Set environment variables
        ENV SERVER_PORT=7860
        ENV SPRING_PROFILES_ACTIVE=prod
        
        # Run the application
        ENTRYPOINT ["java", "-jar", "/app/app.jar"]
        EOF
        
    - name: Create README.md for Hugging Face Space
      run: |
        cat > README.md << 'EOF'
        ---
        title: Spring Gemini Chat
        emoji: ðŸ¤–
        colorFrom: blue
        colorTo: green
        sdk: docker
        app_port: 7860
        ---
        
        # Spring Gemini Chat
        
        A Spring Boot application integrated with Google Gemini AI for chat functionality.
        
        ## Features
        - Chat with Google Gemini AI
        - Spring Boot backend
        - Modern web interface
        
        This application is automatically deployed from the GitHub repository.
        EOF
        
    - name: Install Python dependencies
      run: |
        pip install huggingface_hub
        
    - name: Deploy to Hugging Face Space
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        python << 'EOF'
        import os
        from huggingface_hub import HfApi, create_repo
        from pathlib import Path
        
        # Initialize the API
        api = HfApi()
        token = os.environ.get('HF_TOKEN')
        repo_id = "Phoenix21/spring-gemini-chat"
        
        if not token:
            raise ValueError("HF_TOKEN environment variable is not set")
        
        print(f"Deploying to: {repo_id}")
        
        try:
            # Create the space repository
            create_repo(
                repo_id=repo_id,
                repo_type="space",
                space_sdk="docker",
                private=False,
                token=token
            )
            print(f"Created space: {repo_id}")
        except Exception as e:
            print(f"Space might already exist: {str(e)}")
        
        # Upload files
        try:
            # Upload Dockerfile
            api.upload_file(
                path_or_fileobj="Dockerfile",
                path_in_repo="Dockerfile",
                repo_id=repo_id,
                repo_type="space",
                token=token,
                commit_message="Update Dockerfile"
            )
            
            # Upload README
            api.upload_file(
                path_or_fileobj="README.md",
                path_in_repo="README.md",
                repo_id=repo_id,
                repo_type="space",
                token=token,
                commit_message="Update README"
            )
            
            # Upload target folder (JAR files)
            api.upload_folder(
                folder_path="target",
                path_in_repo="target",
                repo_id=repo_id,
                repo_type="space",
                token=token,
                ignore_patterns=["*.class"],
                commit_message="Update JAR files"
            )
            
            print(f"Successfully deployed to: https://huggingface.co/spaces/{repo_id}")
            
        except Exception as e:
            print(f"Upload failed: {str(e)}")
            raise
        
        EOF
